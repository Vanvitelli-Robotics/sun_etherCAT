#include "Controller.h"
#include <fstream>
#include <cmath>

namespace sun
{
    Controller::Controller(Meca500 *meca500, float gain)
    {
        this->gain = gain;
        this->meca500 = meca500;
    }

    Controller::~Controller()
    {
    }

    void Controller::startThread()
    {
        thread_controller = std::thread(&Controller::position_loop_control, this);
    }

    void Controller::position_loop_control()
    {
        struct sched_attr attr;
        attr.size = sizeof(attr);
        sched_rr(&attr, 30, 0);
		
        std::cout << "Start real time controller thread\n";

		 
		//iteration variables 
        int count = 0;
        int i = 0; 		
       
	   
        //test variables
        float data_position_joint[50000];
        float data_error[50000];
        float data_vel[50000];
        float data_measured_vel[50000];
        int64 time_x[50000];

        //control variables
		float error;
        float joint_position_measured;
        float omega[6] = {0, 0, 0, 0, 0, 0};
        float joint[6] = {0, 0, 0, 0, 0, 0};
        float joint_velocities[6] = {0, 0, 0, 0, 0, 0};
		
        float theta_0, theta_f = 90;          
        float t0;								//the beginnning time 
		float istant_time;
		float theta_d;							//the value of joint position desired at istant ti
        float b[6] = {6, -15, 10, 0, 0, 0};		//coefficients of interpolating polynomial 
		float omega = 1;							//angular frequency

        meca500->getJoints(joint);				//first we take the initial condition
        theta_0 = joint[5];

        t0 = ec_DCtime;							//we take the initial time of loop control
        while (TRUE)
        {	
			istant_time = ec_DCtime-t0;	
			theta_d = ((theta_f-theta_0/2))*sin(omega*istant_time) + (theta_f+theta_0)/2);
            meca500->getJoints(joint);						//measure of joint position
            joint_position_measured = joint[5];

            error = theta_d - joint_position_measured;   //evaluate the error

            omega[5] = error * gain;					//calculate the new velocity for the robot
            meca500->moveJointsVel(omega);				

            meca500->getJointsVelocities(joint_velocities);		//measures for test
			
            if (i < 50000)		//Memorizzo: istanti di tempo, la posizione del giunto controllato, errore, velocità ingresso, velocità misurata. 
            {
                //time_x[i] = istant_time;
				time_x[i] = istant_time;
                data_position_joint[i] = joint_position_measured;
                data_error[i] = error;
                data_vel[i] = omega[5];
                data_measured_vel[i] = joint_velocities[5];
            }
 
            i++;
            osal_us leep(1000);		//control loop sample step. (valuta se ridurlo un pò per evitare che l'attesa sui semafori sia troppa e quindi il passo di campionamento non sia effettivamente di 1ms)
        }

		//scrittura dati su file. Importa su Matlab e fai grafici.
		//quando tutto funziona ripeti il procedimento per avere grafici con valori di gain differenti e thetaf, tf e theta0 diversi
        std::ofstream oFile_p("Data_position_Joint6_sin.txt", std::ios_base::out | std::ios_base::trunc);
        if (oFile_p.is_open())
        {
            if (i > 50000)
                i = 50000;
            for (int y = 0; y < i; y++)
            {
                oFile_p << data_position_joint[y] << "\t";
                oFile_p << time_x[y] - time_x[0] << "\n";
            }
            oFile_p.close();
        }

        std::ofstream oFile_e("Data_error_sin.txt", std::ios_base::out | std::ios_base::trunc);
        if (oFile_e.is_open())
        {
            if (i > 50000)
                i = 50000;
            for (int y = 0; y < i; y++)
            {
                oFile_e << data_error[y] << "\t";
                oFile_e << time_x[y] - time_x[0] << "\n";
            }
            oFile_e.close();
        }

        std::ofstream oFile_v("Data_velocities_sin.txt", std::ios_base::out | std::ios_base::trunc);
        if (oFile_v.is_open())
        {
            if (i > 50000)
                i = 50000;
            for (int y = 0; y < i; y++)
            {
                oFile_v << data_vel[y] << "\t";
                oFile_v << data_measured_vel[y] << "\n";
            }
            oFile_v.close();
        }
    }

    void Controller::waitLoop()
    {
        thread_controller.join();
    }
} // namespace sun
